<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vendor</title>

    <script src='https://api.mapbox.com/mapbox-gl-js/v2.4.0/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.4.0/mapbox-gl.css' rel='stylesheet' />

    <script
        src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.2/mapbox-gl-geocoder.min.js"></script>
    <link rel="stylesheet"
        href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.7.2/mapbox-gl-geocoder.css"
        type="text/css">
    </link>
</head>

<body>
    <h1>I am a vendor.</h1>


    <!-- <input id='search' type='text' placeholder='Enter an address' />
  <ul id='result-list'></ul>
  <div id='map' style='width: 100%; height: 500px;'></div>
  
  <script>
    mapboxgl.accessToken = 'pk.eyJ1Ijoic3dheWFtLTExIiwiYSI6ImNsZTc0NjlqYTAxeGczdm56dWIyMWdoYnoifQ.2IT1CxUH664iTPiG5zhTpg';

    var searchInput = document.getElementById('search');
    var selectedResult = null;
    var selectingResult = false;

    searchInput.addEventListener('input', function() {
      var url = 'https://api.mapbox.com/geocoding/v5/mapbox.places/' + encodeURIComponent(searchInput.value) + '.json?access_token=' + mapboxgl.accessToken;
      fetch(url)
        .then(function(response) {
          return response.json();
        })
        .then(function(data) {
          var resultList = document.getElementById('result-list');
          resultList.innerHTML = '';
          data.features.forEach(function(feature) {
            var listItem = document.createElement('li');
            listItem.textContent = feature.place_name;
            listItem.addEventListener('mousedown', function() {
              selectingResult = true;
            });
            listItem.addEventListener('mouseup', function() {
              if (selectingResult) {
                selectedResult = feature;
                selectingResult = false;
              }
            });
            resultList.appendChild(listItem);
          });
        });
    });

    map.on('click', function(event) {
      if (selectedResult) {
        map.flyTo({center: selectedResult.center});
        selectedResult = null;
      }
    });

    document.getElementsByTagName("li").addEventListener("click", displayDate);

    function displayDate() {
        document.getElementsByTagName("li")
    }
  </script> -->

    <script>
        const SVNIT = [72.7833, 21.1663];
        const LPSavani = [72.78685735866463, 21.19382270200964];
        let center = LPSavani;

        const userLocation = [];
        navigator.geolocation.getCurrentPosition((position) => {
            userLocation.push(position.coords.longitude);
            userLocation.push(position.coords.latitude);
        });

        console.log("USER LOCATION - ", userLocation);

        //SettingUp Map Box

        mapboxgl.accessToken = 'pk.eyJ1Ijoic3dheWFtLTExIiwiYSI6ImNsZTc0NjlqYTAxeGczdm56dWIyMWdoYnoifQ.2IT1CxUH664iTPiG5zhTpg';

        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            zoom: 15,
            center: center || [72.7933, 21.1959]  //Logitude & Lattitude
        });

        //Add controller
        const nav = new mapboxgl.NavigationControl();
        map.addControl(nav, 'bottom-right');

        //Add Search Bar
        // Add the control to the map.
        map.addControl(
            new MapboxGeocoder({
                accessToken: mapboxgl.accessToken,
                mapboxgl: mapboxgl
            })
        );

        //Add Marker
        // const marker = new mapboxgl.Marker({
        //     color: "#3e3e3e",
        //     draggable: true
        //     })
        //     .setLngLat(SVNIT)
        //     .setPopup(new mapboxgl.Popup({ offset: 25 }).setHTML("SVNIT"))
        //     .addTo(map);

        //Enabling GEOLOCATE
        const geoLocate = new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            trackUserLocation: true,
            showUserHeading: true
        })

        map.addControl(geoLocate);

        const location = {
            latitude: userLocation.latitude,
            longitude: userLocation.longitude
        };

        const newLocation = new Location(location);
        newLocation.save((err) => {
            if (err) {
                console.log(err);
            } else {
                console.log('Location saved successfully!');
            }
        });
        //Connect With DataBase
        async function getStores() {
            let stores = await fetch("/stores", { method: "get" });
            stores = await stores.json();
            console.log(stores);

            for (let i = 0; i < stores.length; i++) {

                if (stores[i].storeId == 0) {
                    new mapboxgl.Marker({
                        color: "#7CFC00",
                        // draggable: true
                    })
                        .setLngLat(stores[i].location.coordinates)
                        .setPopup(new mapboxgl.Popup({ offset: 25 }).setHTML(`<a href = "/stores/${stores[i]._id}">BOOK</a>`))
                        .addTo(map);
                }

                else {
                    new mapboxgl.Marker({
                        color: "#FF5733",
                        // draggable: true
                    })
                        .setLngLat(stores[i].location.coordinates)
                        .setPopup(new mapboxgl.Popup({ offset: 25 }).setHTML(`<a href = "/stores/${stores[i]._id}">BOOK</a>`))
                        .addTo(map);
                }

            }
        }

        getStores();

        const reset = document.getElementById("reset");
        reset.addEventListener("click", () => {
            fetch("/map/reset", {
                method: "GET"
            });
            window.location.href = "/map";
        })
    </script>


</body>